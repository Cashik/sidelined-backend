"""extended_message

Revision ID: c16780e7f26a
Revises: 228709cc74f1
Create Date: 2025-05-01 15:15:24.580595

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c16780e7f26a'
down_revision: Union[str, None] = '228709cc74f1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('TEXT', 'TOOL_CALL', 'IMAGE', 'AUDIO', 'VIDEO', 'FILE', 'LOCATION', 'TRANSACTION', name='messagetype').create(op.get_bind())
    op.add_column('message', sa.Column('type', postgresql.ENUM('TEXT', 'TOOL_CALL', 'IMAGE', 'AUDIO', 'VIDEO', 'FILE', 'LOCATION', 'TRANSACTION', name='messagetype', create_type=False), nullable=True))
    op.add_column('message', sa.Column('content_json', postgresql.JSONB, nullable=True))
    op.execute("""
        UPDATE message
        SET content_json = 
            CASE
                WHEN type = 'TEXT' THEN
                    jsonb_build_object(
                        'message', content::text,
                        'settings', jsonb_build_object(
                            'model', model,
                            'chat_style', chat_style,
                            'chat_details_level', chat_details_level
                        )
                    )
                ELSE
                    jsonb_build_object('message', content::text)
            END
    """)
    op.drop_column('message', 'content')
    op.alter_column('message', 'content_json', new_column_name='content')
    op.drop_column('message', 'chat_style')
    op.drop_column('message', 'model')
    op.drop_column('message', 'chat_details_level')
    # ### end Alembic commands ###


def downgrade() -> None:
    # 1. Добавляем обратно поля настроек
    op.add_column('message', sa.Column('chat_details_level', postgresql.ENUM('HIGH', 'MEDIUM', 'LOW', name='chatdetailslevel', create_type=False), autoincrement=False, nullable=True))
    op.add_column('message', sa.Column('model', postgresql.ENUM('GPT_4', 'GPT_4O', 'GPT_4O_MINI', 'GEMINI_2_FLASH', 'GEMINI_2_5_PRO', name='model', create_type=False), autoincrement=False, nullable=True))
    op.add_column('message', sa.Column('chat_style', postgresql.ENUM('FORMAL', 'INFORMAL', name='chatstyle', create_type=False), autoincrement=False, nullable=True))
    # 2. Меняем тип поля content обратно на VARCHAR
    op.alter_column('message', 'content',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    # 3. Восстанавливаем значения из JSONB (теперь уже из строки, но PostgreSQL позволяет обращаться к строке как к JSON)
    op.execute("""
        UPDATE message
        SET
            content = (content::jsonb)->>'message',
            model = ((content::jsonb)->'settings'->>'model')::model,
            chat_style = ((content::jsonb)->'settings'->>'chat_style')::chatstyle,
            chat_details_level = ((content::jsonb)->'settings'->>'chat_details_level')::chatdetailslevel
        WHERE type = 'TEXT'
    """)
    op.execute("""
        UPDATE message
        SET
            content = (content::jsonb)->>'message'
        WHERE type IS NULL OR type != 'TEXT'
    """)
    # 4. Удаляем поле type и ENUM
    op.drop_column('message', 'type')
    sa.Enum('TEXT', 'TOOL_CALL', 'IMAGE', 'AUDIO', 'VIDEO', 'FILE', 'LOCATION', 'TRANSACTION', name='messagetype').drop(op.get_bind())
    # ### end Alembic commands ###
